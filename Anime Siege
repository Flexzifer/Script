-- [üß© ‡πÇ‡∏´‡∏•‡∏î Library ‡πÅ‡∏•‡∏∞ Addons]
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- [üñºÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å]
local Window = Fluent:CreateWindow({
    Title = "Flexzifer HUB " .. Fluent.Version,
    SubTitle = "FLEXZIFER",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- [üìÇ ‡∏™‡∏£‡πâ‡∏≤‡∏á Tab]
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Auto = Window:AddTab({ Title = "Auto", Icon = "" }),
    Unit = Window:AddTab({ Title = "Unit", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

-- [üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô]
Fluent:Notify({
    Title = "Notification",
    Content = "This is a notification",
    SubContent = "SubContent",
    Duration = 5
})

-- [üìë ‡∏™‡πà‡∏ß‡∏ô Main UI Components]
do
   local UNITID
   -- üñäÔ∏è Input
local Input = Tabs.Main:AddInput("Input", {
   Title = "Input Unit Id",
   Default = "Default",
   Placeholder = "Input only UID",
   Numeric = false,
   Finished = false,
   Callback = function(Value)
       print("Input changed:", Value)
       UNITID = Value
   end
})
Input:OnChanged(function()
   print("Input updated:", Input.Value)
end)

   local folder = game:GetService("ReplicatedStorage").assets.items

   local whitelist = {}
   local valueMap = {}
   local lastSelection = nil

   for _, item in pairs(folder:GetChildren()) do
       local rawName = item.Name

       local displayName = rawName:gsub("_%a", function(part)
           return part:sub(2,2):upper()
       end)
       displayName = displayName:gsub("^%l", string.upper)

       table.insert(whitelist, displayName)
       valueMap[displayName] = rawName
   end

   local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
       Title = "Select Item",
       Values = whitelist,
       Multi = false,
       Default = 1,
   })

   Dropdown:OnChanged(function(displayValue)
       lastSelection = displayValue -- ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
       local realValue = valueMap[displayValue]
       print("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", displayValue, "‚Üí ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á:", realValue)
   end)

   Tabs.Main:AddButton({
       Title = "GiverItem",
       Description = "Please Read Before Confirm",
       Callback = function()
           Window:Dialog({
               Title = "Please Read This Before Confirm",
               Content = "Don't Use [RaidToken] [Gem] [Gold] [SiegeToken]",
               Buttons = {
                   {
                       Title = "Confirm",
                       Callback = function()
                           if not lastSelection then
                               warn("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å item")
                               return
                           end

                           local realValue = valueMap[lastSelection]

                           local args = {
                               [1] = {
                                   ["2"] = {
                                       [1] = {
                                           [1] = UNITID, -- your unit ID
                                           [2] = {
                                               [realValue] = 0/0
                                           },
                                           ["n"] = 2
                                       }
                                   }
                               },
                               [2] = {}
                           }

                           game:GetService("ReplicatedStorage"):WaitForChild("ReliableRedEvent"):FireServer(unpack(args))
                       end
                   },
                   {
                       Title = "Cancel",
                       Callback = function()
                           print("Cancelled the dialog.")
                       end
                   }
               }
           })
       end
   })


   Tabs.Unit:AddButton({
      Title = "Clipboard Unit UID",
      Description = "Use this for Find Unit ID",
      Callback = function()
         local scrollingFrame = game:GetService("Players").LocalPlayer.PlayerGui.Units.collection.list.ScrollingFrame

         for _, child in pairs(scrollingFrame:GetChildren()) do
             if child:IsA("ImageButton") then
                 
                 if setclipboard then
                     setclipboard(child.Name)
                     
                 else
                     
                 end
             end
         end
         
      end
  })

  -- ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏¢‡∏¥‡∏á Event
local valueMap = {
    ["Regular Crate"] = "crate",
    ["Old Crate"] = "old_crate"
}

-- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Dropdown
local Dropdown = Tabs.Auto:AddDropdown("Dropdown", {
    Title = "Select Crate",
    Values = {"Crate", "Old Crate"},
    Multi = false,
    Default = 1,
})

-- ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
local lastSelection = "Crate"

Dropdown:OnChanged(function(displayValue)
    lastSelection = displayValue
    local realValue = valueMap[displayValue]
    print("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", displayValue, "‚Üí ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á:", realValue)
end)

-- Toggle
local Toggle = Tabs.Auto:AddToggle("ToggleOpenCrate", {
    Title = "Auto Crate",
    Default = false
})

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- ‡∏•‡∏ö obtain UI
local function RemoveObtainFrames()
    for _, gui in pairs(playerGui:GetChildren()) do
        if gui:IsA("ScreenGui") then
            local obtainFrame = gui:FindFirstChild("obtain")
            if obtainFrame and obtainFrame:IsA("Frame") and obtainFrame.Name == "obtain" then
                obtainFrame:Destroy()
            end
        end
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á
local function Open()
    local selectedCrate = valueMap[lastSelection] or "crate"
    local args = {
        [1] = {
            [""] = {
                [1] = {
                    [1] = selectedCrate;
                    ["n"] = 1;
                };
            };
        };
        [2] = {};
    }

    ReplicatedStorage:WaitForChild("ReliableRedEvent", 9e9):FireServer(unpack(args))
    RemoveObtainFrames()
end

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
local running = false

Toggle:OnChanged(function(value)
    print("Toggle changed:", value)
    running = value

    if running then
        task.spawn(function()
            while running do
                Open()
                task.wait()
            end
        end)
    end
end)



end


-- [üß† ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Settings ‡πÅ‡∏•‡∏∞ Theme/Config]
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FlexziferScriptHub")
SaveManager:SetFolder("FlexziferScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- [üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô]
Window:SelectTab(1)
Fluent:Notify({
    Title = "Flexzifer",
    Content = "The script has been loaded.",
    Duration = 8
})
SaveManager:LoadAutoloadConfig()
